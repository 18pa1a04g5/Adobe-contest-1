minimum distinct numbers

class Solution:
    def mindistinct (self, arr, n, k):
        count = {}
        for i in range(n):
            count[arr[i]] = count.get(arr[i], 0) + 1
        a = [0] * (n + 1)
        for it in count:
            a[count[it]] += 1
        ans = len(count)
        for i in range(1, n + 1):
            temp = a[i]
            if (temp == 0):
                continue
            t = min(temp, k // i)
            ans -= t
            k -= i * t
       return ans


boolean matrix 

class Solution:
    def booleanMatrix(self,matrix):
        R = len(matrix)
        C = len(matrix[0])
        row = [0] * R  
        col = [0] * C  

        for i in range(0, R) :         
            for j in range(0, C) : 
                if (matrix[i][j] == 1) : 
                    row[i] = 1
                    col[j] = 1
              
        for i in range(0, R) : 
            for j in range(0, C): 
                if ( row[i] == 1 or col[j] == 1 ) : 
                    matrix[i][j] = 1
